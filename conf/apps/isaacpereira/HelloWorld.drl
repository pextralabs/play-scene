package drools

import models.*;
import akka.actor.ActorRef;

import br.ufes.inf.lprm.scene.model.Situation;
import br.ufes.inf.lprm.situation.bindings.*;
import br.ufes.inf.lprm.situation.model.Participation;
import br.ufes.inf.lprm.situation.model.SituationType;
import br.ufes.inf.lprm.scene.util.SituationHelper;

global ActorRef publisher;

declare Data
	@role(event)
	@timestamp(serverTimestamp)
end

declare AlertSituation extends Situation
    stream: Stream @part @key
end

/*declare AlertSituationXYZ extends AlertSituation
end

declare AlertSituationABC extends AlertSituation
end*/

rule "AlertSituation"
@role(situation)
@type(AlertSituation)
    when
        stream: Stream(key == "bb03f886a9104e9fbac9db80084be9cf")
        Double(doubleValue() >= 22.0) from accumulate(
            Data($value: get("temp"), this.stream.key == "bb03f886a9104e9fbac9db80084be9cf") over window:length(2),
            average($value)
        )
    then
    	SituationHelper.situationDetected(drools);
end

/*rule "AlertSituationABC"
@role(situation)
@type(AlertSituationABC)
    when
        stream: Stream(key == "438bdfea6d254e3d873292de2da285dd")
        Double(doubleValue() >= 22.5) from accumulate(
            Data($value: get("temp"), this.stream.key == "438bdfea6d254e3d873292de2da285dd") over window:length(2),
            average($value)
        )
    then
    	SituationHelper.situationDetected(drools);
end*/

/*rule "PublishAlert"
  when
     $alert: AlertSituation()
  then
     publisher.tell($alert.toString(), null);
end*/

rule "Data"
  when
      $stream: Stream()
      $data: Data(stream == $stream)
  then
      publisher.tell("value from " + $stream.getName() + "(" + $stream.getKey() + ") is " + $data.get("temp"), null);
end